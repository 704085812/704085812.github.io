<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>找不到可用ip地址问题解决</title>
      <link href="/2020/07/09/zhao-bu-dao-ke-yong-ip-di-zhi-wen-ti-jie-jue/"/>
      <url>/2020/07/09/zhao-bu-dao-ke-yong-ip-di-zhi-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>log4j配置说明</title>
      <link href="/2020/07/07/log4j-pei-zhi-shuo-ming/"/>
      <url>/2020/07/07/log4j-pei-zhi-shuo-ming/</url>
      
        <content type="html"><![CDATA[<p>%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。<br>%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。<br>    %d{ABSOLUTE} 只有时间没有日期<br>%r：输出自应用程序启动到输出该log信息耗费的毫秒数。<br>%t：输出产生该日志事件的线程名。<br>%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。<br>%c：输出日志信息所属的类目，通常就是所在类的全名。<br>%M：输出产生日志信息的方法名。<br>%F：输出日志消息产生时所在的文件名称。<br>%L:：输出代码中的行号。<br>%m:：输出代码中指定的具体日志信息。<br>%n：输出一个回车换行符，Windows平台为”rn”，Unix平台为”n”。<br>%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。<br>%%：输出一个”%”字符。<br>另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</p><p>1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。<br>2)%-20c：”-“号表示左对齐。<br>3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 知识集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2020/07/07/mysql-ji-chu/"/>
      <url>/2020/07/07/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的引擎："><a href="#数据库的引擎：" class="headerlink" title="数据库的引擎："></a>数据库的引擎：</h2><p>​              不同的引擎有不同的存储方式、索引技巧、锁定水平，具有不同的性能</p><p>ORACLE和SqlServer只有一种存储引擎，MySQL有多种</p><p>​       MySQL常用的引擎：InnoDB、MyISAM、MEMORY</p><p>​       MyISAM：访问快，不支持事务和外键，表结构储存在.frm文件中，表数据储存在.myd文件中，索引储存在.myi文件中</p><p>​       InnoDB：时MySQL5.5之后的默认存储引擎，支持事务，占用磁盘空间大，支持并发控制</p><p>​       MEMORY：内存存储，速度快，不安全，适合小量快速访问的数据，类似REDIS</p><p>​       引擎是针对于表的，在建表时可以指定使用的引擎</p><p>​              engine=myisam</p><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><p>1、Mysql目录结构</p><p>​       MysqlInstanceConfig.exe 数据库配置向导</p><p>​       data&lt;目录&gt; 系统必须的数据库所在的目录</p><p>​       my.ini文件 mysql的配置文件</p><p>​       c:\ProgramData\MySQL\MySQL Server 5.5\data\ 用户自己的数据库所在目录</p><p>​       数据库备份和还原语句</p><p>​              备份：mysqldump -u用户名 -p密码 数据库 &gt; 文件的路径</p><p>​              还原：use 数据库；   source 导入文件的路径</p><p>​       mysqld是MYSQL的主程序，服务器端  mysql是MySQL 的命令行工具，客户端</p><p>2、数据库服务器&gt;数据库&gt;数据表&gt;表记录</p><p>​       SQL结构化查询语言</p><p>​       DDL数据定义语言：建库、建表</p><p>​       DML数据操纵语言：对表中记录增删改</p><p>​       DQL数据查询语言：对表中的查询操作</p><p>​       DCL数据控制语言：对用户权限的设置</p><p>​       SQL不区分大小写，每条语句以分号结尾，SQLyog不用加</p><p>​       每条语句需要选中执行，可以按F9</p><p>3、三种注释：</p><p>​       ①–空格       单行注释</p><p>​       ②/* */           多行注释</p><p>​       ③#               MySQL特有注释方式</p><p>​       常用数据类型：</p><p>​       ①int 整形</p><p>​       ②double 浮点型</p><p>​       ③varchar(m) 字符串型</p><p>​       ④date</p><p>​       ⑤null 没有添加数据的字段</p><p>4、DDL操作库</p><p>​       建库语句：create DATABASE if not exists 数据库名 character set 字符集</p><p>​       查库语句：show DATABASES                                查看所有数据库</p><p>​                       show create DATABASE 数据库名        查看数据库的建表信息</p><p>​       修改语句：alter DATABASE 数据库名 default character set 字符集</p><p>​       删库语句：drop DATABASE 数据库名<br>​        使用语句：select DATABASE( )   查看正在使用的数据库</p><p>​                       use 数据库名          使用/切换数据库</p><p>5、DDL操作表</p><p>​       创建表：create TABLE 表名{                          用逗号分隔</p><p>​       字段名1 字段类型1，</p><p>​       字段名2 字段类型2</p><p>}</p><p>create TABLE 新表名 like 旧表名            快速创建一个表结构相同的表</p><p>​       查看表：show TABLES</p><p>​                     DESC表名            查看表结构，以表格形式返回</p><p>​                     show create TABLE 表名     查看建表语句</p><p>​       删除表：drop TABLE if exits 表名</p><p>​       修改表：添加表列（ADD）      alter TABLE 表名 ADD 列名 类型</p><p>​                     修改表字符集                    alter TABLE 表名 character set 字符集</p><p>​                     修改表名（RENAME）       RENAME TABLE 旧表名 to 新表名</p><p>​                     修改列名（CHANGE）  alter TABLE 表名 CHANGE 旧列名 新列名 类型；</p><p>​                     修改列类型（MODIFY）    alter TABLE 表名 MODIFY 列名 新的类型</p><p>​                     删除列（DROP）        alter TABLE 表明 DROP 列名</p><p>6、DML操作表数据</p><p>​       插入记录：insert into 表名 （字段1，字段2） values （值1，值2），（值3，值4）</p><p>​       修改记录：update 表名 set 列名1=值1，列名2=值2 where 条件表达式</p><p>​       删除记录：delete from 表名 where 条件表达式</p><p>​                       truncate TABLE 表名 删除表中所有记录</p><p>​              区别：truncate相当于删除表再重新创建一张</p><p>7、DQL查询表数据</p><p>​       select 列名 from 表名 where 条件表达式</p><p>​       可以用*代表所有：select * from 表名</p><p>​       指定别名用as</p><p>​                     select 字段名1 as 别名，字段名2 as 别名 from 表名 as 表别名</p><p>​                     显示的时候使用新的名字，并不改变表的结构</p><p>​       查询指定列且结果去掉重复数据distinct</p><p>​                     select distinct 字段名 from 表名</p><p>​       某列数据和值运算                           参与运算的值必须为数值类型</p><p>​                     select 列名1+固定值 from 表名</p><p>​                     select 列名1+列名2 from 表名</p><p>8、条件查询where</p><p>​       运算符：</p><p>​              ①&gt;，&lt;，=，&gt;=，&lt;&gt;等         &lt;&gt;在sql中表示不等于，也可以使用!=但没有==</p><p>​              ②between 100 and 200     在100到两百之间，包头包尾</p><p>​              ③in（集合）                     集合表示多个值，使用逗号分隔，每个值都是一个条件，符合就显示</p><p>​              ④like ‘_张%’                       模糊查询</p><p>​                     通配符：①%：匹配任意多个字符串 ②_ （下划线）：匹配一个字符</p><p>​                            ③[ ]：匹配指定范围[a-f]或[abcdef]中的任何单个字符</p><p>​                            ④[^ ]：代表不属于中括号范围的任何单个字符</p><p>​                            ⑤* ：与DOS用法相同，代表多个字符，c*c代表cc，cac或caaac等。</p><p>​                            ⑥？：与DOS用法相同，代表单个字符</p><p>​                            ⑦#：与DOS用法相同，代表单个数字。</p><p>​              ⑤is null                              查询某一列为null的值，注意不能写=null</p><p>​       逻辑运算符：</p><p>​              ①and 或 &amp;&amp;：逻辑与，建议使用and</p><p>​              ②or  或 ||： 逻辑或</p><p>​              ③not ：逻辑非</p><p>9、DQL的排序</p><p>​       单列排序：只按某一字段进行排序</p><p>​              select 字段名 from表名 where 字段=值 order by 字段名 ASC/DESC</p><p>​                     ASC：升序，默认值       DESC：降序</p><p>​       组合排序：针对多个字段进行排序，先匹配第一个，再匹配第二个</p><p>​              select 字段名 from 表名 where 字段=值 order by age desc，math asc</p><p>10、聚合函数：          针对一列值进行计算</p><p>​       select 聚合函数(列名) from 表名</p><p>​              max        min        avg平均值           count统计共有多少条       sum</p><p>​       一般对于null的记录不会被统计，要加上null需要使用if null</p><p>​              select if null(id，0) from 表名                  查询id字段，如果为null则用0替换</p><p>select count(if null(id，0)) from 表名    统计为0的有多少个</p><p>11、分组：          group by</p><p>​       select 字段1,字段2… from 表名 group by 分组字段 having 条件</p><p>​       注意：having和where的区别</p><p>​              where：对查询结果分组前，将不符合where条件的筛掉。即先过滤再分组</p><p>​                            where后面不可再使用聚合函数</p><p>having：筛选满足条件的组，即先分组再过滤</p><p>​              having后面可以使用聚合函数</p><p>​              group by后面不能出现where，只能出现having</p><p>12、limit语句：         限制查询记录的条数，可以用来分页显示大量数据</p><p>​       select 字段列表 [as 别名] from 表名 [where子句] [group by子句] [having子句] [groupby子句] [limit子句]</p><p>​       limit语法：limit offset,length</p><p>​              offset：起始行数，从0开始，如果没有写就是0</p><p>​              length：返回的行数</p><p>​       limit 2,6：从第三条开始显示，返回六条</p><p>​       limit是一个方言</p><p>13、数据库约束：             不正确的数据无法添加到表</p><p>​       主键：primary key       </p><p>​       外键：foreign key        </p><p>​       唯一：unique</p><p>​       非空：not null</p><p>​       检查约束：check（mysql不支持）</p><p>14、主键：   用来唯一标识数据库中的每一条记录，一般为id</p><p>​       创建表时添加：id int primary key </p><p>​       已有表中添加：alter table 表名 add primary key(字段名)</p><p>​       删除主键：alter table 表名 drop primary key</p><p>​       表中插入重复的主键值或为null的主键值时会报错</p><p>​       主键自增：AUTO_INCREMENT</p><p>​       create table 表名{</p><p>​       列名 int primary key AUTO_INCREMENT</p><p>}AUTO_INCREMENT=起始值</p><p>向已有表修改初始值：alter table 表名 AUTO_INCREMENT=起始值</p><p>注意：DELETE和TRUNCATE对自增的影响</p><p>​       DELETE：删除所有记录后，新记录会继续自增，原先到3，新表就从4开始</p><p>​       TRUNCATE：删除以后，新记录会重新从起始值自增</p><p>15、唯一约束：          表中某一列不能出现重复的值</p><p>​              建表时添加：name varchar(20) unique</p><p>​              除sqlserver外重复插入多个null不会报错</p><p>​       非空约束：          某一列不能为null</p><p>​              建表时添加：name varchar(20) not null</p><p>​       默认值：default</p><p>​              建表时添加：address varchar(20) default ‘广州’</p><p>​              添加数据时只需使用default即添加的是‘广州’</p><p>​       问题：如果一个字段设置了非空与唯一约束，该字段与主键的区别？</p><p>​              ①主键只能在一个表中，只能有一个。不能出现多个主键。主键可以是单列也可以是多列</p><p>​              ②自增长只能用在主键上</p><p>16、外键约束：</p><p>​       单表的缺点：①数据冗余   ②后期还会出现频繁增删改的问题</p><p>​       主表：一方，用来约束别人的表：只有一个id</p><p>​       从表：多方，被别人约束的表，拥有外键的表</p><p>​       四种方法：</p><p>​       ①建表时直接添加在属性值后：s­­_cid int references class(id)</p><p>​       ②建表时在语句结尾添加：foreign key(s_cid) references class(id)</p><p>​       ③带约束名称的添加外键约束：</p><p>constraint 外键约束名称 foreign key(外键字段名) references 主表名(主键字段名)</p><p>eg: CONSTRAINT ‘FK_ID_ST’ foreign key(st_id) REFERENCES student(id)</p><p>​       ④为已建好的表添加约束</p><p>​              alter table 表名 add constraint 约束名 foreign key(外键字段名) references 外表表名(主键字段名)</p><p>​       删除外键：</p><p>​              alter table 从表 drop foreign key 外键名称</p><p>​       外键的级联：</p><p>​              需要同时修改或删除主表与外表的主键/外键值，成为级联操作</p><p>​              只能在创建表时创建级联关系，更新主表的键时从表也会更新外键</p><p>on update cascade ：级联更新。</p><p>​              on delete cascade ：级联删除</p><p>17、多表间关系</p><p>​       一对多，主键和外键</p><p>​       多对多，需要有中间表分别存储两个表的关系，中间表至少有两个字段，分别作为外键指向各自的主键</p><p>​              创建两个外键，再创建复合主键primary key(rid,uid)</p><p>18、数据库范式：共六个，最基础有三大范式</p><p>​       1NF原子性：数据库表的每一列都是一个不可割的原子数据项，不能是集合、数组等非原子数据项</p><p>​       2NF不产生局部依赖：满足1NF的前提下，表中【【的每一个字段都完全依赖于主键</p><p>​              指不能存在仅依赖主键一部分的列：一张表只描述一件事情</p><p>​       3NF不产生传递依赖：满足2NF的前提下，表中的每一列都直接依赖于主键，而不是通过其他列来间接依赖于主键</p><p>​              指所有列不依赖于其他非主键列</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a><strong>多表查询</strong></h2><p>1、笛卡尔积：</p><p>​       例如两个集合A{1，2}和B{3，4，5}相乘结果为{(1,3),(2,3),(1,4),(2,4),(1,5),(2,5)}</p><p>​       select * from 表1，表2也会出现数据任意组合的现象</p><p>​       清除笛卡尔积：使用where外键=主键等条件过滤掉无用数据</p><p>2、内连接查询 </p><p>​       内连接：使用左表的记录去匹配右表的记录</p><p>隐式内连接：             看不到join关键字，使用where消除无用数据</p><p>​              SELECT t1.name, t2.gender, t3.name from emp t1, dept t2 where t1.’dept_id’ = t2.’id’;</p><p>​       显示内连接：             SELECT 字段 FROM 左表 [inner] join 右表 on 条件1  [where条件2]</p><p>​              可以省略inner，结尾仍可以加where再次筛选</p><p>​       步骤：①确定查询哪些表： select 左表 inner join 右表 on</p><p>​              ②确定表连接的条件  左表.id = 右表.id</p><p>​              ③确定查询的条件  具体值</p><p>​              ④确定查询的字段  显示哪些字段</p><p>3、外连接查询：</p><p>​       左外连接：用左表的记录去匹配右表的记录，如果复合条件则显示，不符合则显示null</p><p>​              SELECT 字段名 FROM 左表 LEFT[OUTER] JOIN 右表 on 条件</p><p>​              可以理解为：在内连接的基础上保证左表数据全部显示</p><p>​       右外连接：SELECT 字段名 FROM 左表 RIGHT[OUTER] JOIN 右表 on 条件</p><p>​              与左外同理，保证右表数据全部显示</p><p>4、子连接：        </p><p>​       select * from emp where dept_id = (select id from dept where name=’市场部’ )</p><p>​       概念：①一个查询的结果作为另一个查询的条件</p><p>​              ②有循环的嵌套，内部的查询成为子查询</p><p>​              ③子查询要使用括号</p><p>​       子查询是单行单列时，父查询使用where ：select 字段 from 表 where 字段=（子查询） </p><p>​       子查询是多行单列时，父查询使用in：select 字段 from 表 where 字段 IN（子查询）</p><p>​       子查询时多行多列时。父查询使用from：select 字段 from （子查询）表别名 where 条件</p><p>​       子查询作为表需要取别名，否则这张表没有名称无法访问表中字段</p><p>5、事务</p><p>​       事务执行是一个整体，所有的SQL语句都必须执行成功，有一条失败都要进行回滚</p><p>​       手动提交事务：①开启事务：start transaction</p><p>​                            ②提交事务：commit</p><p>​                            ③回滚事务：rollback</p><p>​              正常顺序：开启事务→执行SQL语句→成功提交事务</p><p>​              失败顺序：开启事务→执行SQL语句→失败回滚事务</p><p>​       自动提交事务：MYSQL默认每一条DML（增删改）语句都是一个事务</p><p>​       事务开启之后，所有的操作都会临时保存到事务日志中，事务日志只有在得到commit指令后才会同步到数据表中，其他任何情况都会清空事务日志。</p><p>6、回滚点</p><p>​       在某些成功的操作完成后，后续操作无论成功或失败，前置的操作均已成功，在已成功的操作后设置回滚点，可避免返回所有操作</p><p>​       设置回滚点：savepoint 名字</p><p>​       回到回滚点：rollback to 名字</p><p>7、事务的四大特性：</p><p>​       ①原子性：每个事务都是一个整体不可拆分</p><p>​       ②一致性：事务执行前数据库总状态与执行后状态应一致，例如转账前总额和转账后一致</p><p>​       ③隔离性：事务与事务之间不应相互影响</p><p>​       ④持久性：一旦事务执行成功，对数据库的影响是持久的</p><p>​       因并发操作引发的问题：</p><p>​       ①脏读：一个事务读到了另一个事务尚未提交的数据</p><p>​       ②不可重复读：一个事务两次读取到的数据内容不一致，是事务update时引发的问题</p><p>​       ③幻读：一个事务两次读到的数据数量不一致，是insert或delete时引发的问题</p><p>​       MYSQL的四种隔离级别（解决并发问题）</p><p>​                              <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133914000.png" alt="1594133914000">                                                  </p><p>​       相关操作：</p><p>​       select @@tx_isolation ：查询隔离级别</p><p>​       set global transaction isolation level 级别字符串：设置隔离级别</p><p>8、DCL 数据控制语言</p><p>​       mysqld是MySQL的主程序，服务器端   mysql是MySQL的命令行工具，客户端</p><p>​       创建用户：create user ‘用户名’@‘主机’ indentified by ‘密码’</p><p>​                     主机：指定该用户在哪个主机上可以使用，本地localhost，任意外地%</p><p>​                     密码可以为空</p><p>​       删除用户：drop user ‘用户名’@‘主机名’</p><p>​       给用户授权：grant 权限1,权限2… on 数据库.表名 to ‘用户名’@‘主机名’</p><p>​              权限：create、alert、select、insert、update等，全部为all</p><p>​              数据库、表名：该用户可以操作哪些表，全部为<em>.</em></p><p>​       撤销授权：revoke 权限1,权限2… on 数据库.表名 from ‘用户名’@‘主机名’</p><p>​       查看权限：show grants for ‘用户名’@‘主机名’</p><p>​       修改管理员密码：mysqladmin -uroot -p旧密码 新密码</p><p>​              需要在mysql未登录时操作，新密码不需要加引号</p><p>​       修改普通用户密码：set password for ‘用户名’@‘主机名’ = password(‘新密码’)</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>1、JDBC：</p><p>​       是SUN公司定义的一套JAVA操作所有关系型数据库的规范定义接口。真正操作数据库还要使用各个公司的具体实现类，这种实现类被称作数据库驱动</p><p>​       真正执行的代码时驱动jar包中的实现类 </p><p>​       使用JDBC需要用到的类：</p><p>​              ①java.sql：所有与JDBC访问数据库相关的接口和类</p><p>​              ②javax.sql：数据库拓展包，提供数据库额外的功能，如连接池</p><p>​              ③数据库驱动：由各大厂商提供，需要额外下载，是对JDBC接口实现的类</p><p>​       核心API：</p><p>​              ①DriverManager类：管理和注册数据库驱动、得到数据库连接对象</p><p>​              ②Connection接口：一个连接对象，可用于创建Statement或PareparedStatement对象</p><p>​              ③Statement接口：一个SQL语句对象，用于将SQL语句发送给数据库服务器</p><p>​              ④PreparedStatement接口：一个SQL语句对象，是Statement的子接口</p><p>​              ⑤ResultSet接口：用于封装数据库查询到的结果集，返回给客户端Java程序</p><p>​       导入驱动jar包</p><p>​              jar包添加在模块目录下的libs文件夹下，右键add添加到库library</p><p>​              mysql-connector-java-5.1.37-bin.jar</p><p>​       加载和注册驱动</p><p>​              Class.forName(数据库驱动实现类)：mysql是“com.mysql.jdbc.Driver”</p><p>​              从JDBC3开始可以省略className步骤</p><p>​       使用JDBC基本方法步骤：</p><p>//1、导入驱动jar包    mysql-connector-java-5.1.37-bin.jar复制到libs文件夹下Add as library</p><p>​        //2、注册驱动</p><p>​        Class.forName(“com.mysql.jdbc.Driver”);</p><p>​        //3、获取数据库连接对象</p><p>​        Connection conn = DriverManager.getConnection(“jdbc:mysql://localhost:3306/jdbctestdb”, “root”, “root”);</p><p>​        //4、定义sql语句,获取执行对象statement</p><p>​        String sql = “update dept set loc = ‘郑州’ where id = 30”;</p><p>​        Statement statement = conn.createStatement();</p><p>​        //5、执行sql</p><p>​        int count = statement.executeUpdate(sql);</p><p>​        //6、处理结果</p><p>​        System.out.println(count);</p><p>​        //7、释放资源</p><p>​        statement.close();</p><p>​        conn.close();</p><p>​       释放资源：</p><p>​              需要释放的对象：ResultSet结果集、Statement语句、Connection连接</p><p>​              释放原则：先开的后关，后开的先关：ResultSet→Statement→Connection</p><p>​              放在finally代码块中</p><p>2、DriverManager类</p><p>​       作用：①管理和注册驱动   ②创建数据库的连接</p><p>​       Connection getConnection(String url,String user, String password)通过连接字符串、用户名密码来得到数据库连接对象</p><p>​       Connection getConnection(String url, Properties info)通过连接字符串、属性对象得到数据库连接对象</p><p>​              ①URL：不同数据库URL不同，MySQL是 jdbc:mysql://localhost:3306/数据库[?参数名=参数值]</p><p>​                            意为：协议名:子协议://服务器名或IP地址/数据库名?参数=值</p><p>​              ②驱动类的字符串名：com.mysql.jdbc.Driver</p><p>​              ③参数名=参数值：可以指定使用编码来处理数据，例如?characterEncoding=utf-8</p><p>3、Connection接口</p><p>​       代表一个连接对象，具体实现由数据库厂商实现</p><p>​       方法：Statement createStatement()：创建一条SQL语句对象</p><p>​       Connection用来管理事务：<br>​               ①开启事务：setAutoCommit(boolean autoCommit)，false即开启事务（意为手动提交）</p><p>​              ②提交事务：commit()</p><p>​              ③回滚事务：rollback()</p><p>4、Statement接口和prepareStatement接口</p><p>​       区别：prepareStatement执行动态sql对象</p><p>​       Statement的方法：</p><p>​              ①执行sql：boolean execute(String sql)：可以执行任意sql语句，但很少用</p><p>​              ②int executeUpdate(String sql)：执行DML(insert、update、delete)语句、DDL(create、alter、drop)语句</p><p>​                     返回的int值代表影响的行数，可以同各国返回值判断DML是否执行成功</p><p>​              ③ResultSet excuteQuery(String sql)：执行DQL(select)语句，返回结果集对象</p><p>5、ResultSet接口</p><p>​       游标：抽象，游标初始指向表的第一行（字段行），可以逐行移动</p><p>​       boolean next()：游标向下移动一行，如果还有下一条记录返回true否则返回false</p><p>​                     可以使用while()来遍历显示数据</p><p>​       数据类型 getXxx(参数)：Xxx代表要取的数据的数据类型</p><p>​                     参数可以接收int/String的值，如果是String代表列的名称，int代表列的编号，从1开始</p><p>​       两种报错：</p><p>​              ①光标在第一行（字段行），使用getXxx，报错Before start of result set</p><p>​              ②光标在最后一行，使用next，报错After end of result set</p><p>6、JDBCUtils案例</p><p>​       因jdbc操作重复度高，可以提取工具类</p><p>​       ①需要创造Connection连接的方法</p><p>​              因url、user、password每次使用不一定相同，但不能让用户主动输入，</p><p>​              所以将上述信息提取成一个配置文件jdbc.properties，每次使用在里面读取即可</p><p>​              jdbc.properties包括url、user、password、driver的信息，放置在src目录下</p><p>​              使用static静态代码块，调用这个方法时，只读取一次文件</p><p>​                     注意静态代码块只能trycatch异常而不能抛出</p><p>​              创建Properties集合使用load来通过流读取配置文件，使用getProperty获取属性值</p><p>​                     pro.load(new FileReader(“src/jdbc.properties”))</p><p>​                     url = pro.getProperties(“url”)</p><p>​       ②需要关闭资源的方法<br>​               提取出close方法，并且添加判断非空的条件</p><p>​       因DDL、DML和DQL需要的对象不同，所以需要使用方法重载来创建两个或三个不同参数的方法</p><p>​       直接使用相对路径进行jdbc.properties的读取时出现了报错</p><p>​           <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594134011750.png" alt="1594134011750">     </p><p>​           <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594134018360.png" alt="1594134018360">      </p><p>​              显示找不到文件，此时如果修改成绝对路径则可以正常运行</p><p>​              这时推荐使用类加载器ClassLoader进行动态的读取资源，</p><p>​                     使用字节码文件可获得类加载器Utils.class.ClassLoader()</p><p>​                     使用类加载器可以将文件目录转化成URL资源，该目录是以src为基准的</p><p>​                     将URL资源转化成对应的路径字符串即可使用</p><p>​                     修改为如下代码即可执行成功</p><p>​           <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594134026935.png" alt="1594134026935">      </p><p>​       执行Demo时出现了刁钻的报错</p><p>​           <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594134034364.png" alt="1594134034364">      </p><p>​              错误代码为如下，修改后依然错误</p><p>​           <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594134042223.png" alt="1594134042223">      </p><p>​              原因是List集合在堆中并没有自己的内存，即使是new list也没有内存，必须有自己的实例化对象</p><p>​              最终修改如下</p><p>​           <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594134048133.png" alt="1594134048133">      </p><p>​              ArrayList()与List()的区别在于，List是接口，而ArrayList为具体实现类，有对象去占用堆内存。</p><p>​       注意这里sql字符串的拼接</p><p>​       String sql = “select * from user where username = ‘“+username+”‘ and password = ‘“+password+”‘ “;</p><p>7、PrepareStatement </p><p>​       好处：①预编译减少SQL编译次数，提高效率</p><p>​              ②避免sql注入，安全性更高</p><p>​              ③提高了程序的可读性</p><p>为了避免sql注入问题：  </p><p>​       sql注入问题：输入用户名随便，输入密码为：’a or ‘a’ = ‘a</p><p>​              形成sql：select * from user where username = ‘qweasdq’ and password = ‘a’ or ‘a’ = ‘a’ </p><p>​                            后面形成恒等式会造成始终为true的情况</p><p>静态和动态执行sql的区别：</p><p>​       ①Statement静态执行sql，只能执行好进行字符串拼接好的sql语句</p><p>​       ②PrepareStatement动态执行sql，执行的是预编译的sql（参数使用？作为占位符）</p><p>预编译：       提高了SQL的执行效率</p><p>​       PrepareStatement会将SQL语句先发送给数据库预编译。并引用预编译后的结果，可以多次传送不同的数据给Prepare Statement对象来执行，发送一万条仅参数不同的sql语句数据库仅需预编译一次。</p><p>PrepareStatement的使用</p><p>定义sql步骤发生改变</p><p>​              sql = “select * from user where username = ? and password = ?”</p><p>获取PrepareStatement对象</p><p>​              Connection.prepareStatement(String sql)</p><p>​       给？赋值</p><p>​              方法：setXxx(参数1，参数2)：       Xxx代表数据类型</p><p>​                     参数1：？的位置，从1开始           参数2：？的值</p><p>​       执行sql时只需使用executeQuery()而不需要传入参数了</p><p>后期都会使用PrepareStatement来执行增删改查的所有操作</p><p>8、JDBC控制事务<br>        使用Connection对象的方法来管理事务</p><p>​              ①开启事务：setAutoCommit(boolean autoCommit)，false即开启事务（意为手动提交）</p><p>​              ②提交事务：commit()</p><p>​              ③回滚事务：rollback()</p><p>​       开启事务操作放在getConnection后，提交事务放在执行所有sql语句后</p><p>​       回滚操作放在catch里，因为一旦出现异常就会执行catch，放在catch里会在出现异常时自动回滚</p><p>9、数据库连接池</p><p>​       </p><p>​       是一个存放数据库连接的容器。容器创建时会申请一些连接对象，用户访问数据库时直接从连接池中获取连接对象，用户访问完毕后会将连接对象自动归还给容器。</p><p>​       好处：①节约资源      ②用户访问高效   ③方便对连接进行统一管理</p><p>​       标准接口：javax.sql包下的DataSource接口</p><p>​       标准方法：①获取连接：getConnection()       ②归还连接：Connection.close()</p><p>​                     如果Connection是从连接池获取的，close方法将不是关闭连接而是归还</p><p>​       一般有两种连接池：①c3p0      ②Druid（阿里巴巴）</p><p>​              无论用哪种连接池都需要使用同一个jar包：mysql-connector-java-5.1.37-bin.jar</p><p>​       c3p0：</p><p>​              jar包：①c3p0-0.9.5.2.jar   ②mchange-commons-java-0.2.12.jar      </p><p>​              配置文件：c3p0.properties 或c3p0-config.xml，连接池会自动寻找配置文件</p><p>​                     路径：jar包放在libs文件夹；配置文件放在src目录，而不是任何子目录</p><p>​              创建核心数据库连接池对象：DataSource ds =new ComboPooledDataSource()</p><p>​                            这里什么参数都没传，使用default配置，传参则使用指定名称的配置</p><p>​              获取连接对象：Connection conn = ds.getConnection()</p><p>​       Druid：</p><p>​              jar包：druid-1.0.9.jar</p><p>​              配置文件：properties文件，可任意命名。需要手动加载配置文件</p><p>​              路径：建议也放在src目录下（一般放在libs目录）</p><p>​                     Properties pro = new Properties();</p><p>InputStream is = 类名.class.getClassLoader().getResourceAsStream(“druid.properties”);</p><p>pro.load(is);</p><p>​              创建数据库连接池对象：通过工厂对象获取</p><p>​                     DataSource ds = DruidDataSourceFactory.createDataSource(pro);</p><p>​              获取连接：</p><p>​                     Connection conn = ds.getConnection();</p><p>10、JDBCTemplate</p><p>​       是Spring框架对JDBC工具的封装</p><p>​       使用步骤：</p><p>​              ①导入jar包</p><p>​              ②创建JDBCTemplate对象，依赖于数据源DataSource</p><p>​                     JdbcTemplate template = new JdbcTemplate(ds);</p><p>​                            ds直接通过已写的JdbcUtils来调用即可</p><p>​              ③调用JdbcTemplate的方法完成CRUD</p><p>​                     update()：执行DML语句</p><p>​              （常用）query()：查询结果并封装为javaBean对象</p><p>​                     queryForMap()：查询结果并封装为Map集合</p><p>​                            注意这个方法期盼返回的结果是仅一条记录，列名为key值为value</p><p>​                     queryForList()：查询结果并封装为List集合</p><p>​                            注意这个方法List集合里装载的是一个个的Map集合，可以查询多条记录</p><p>​                     queryForObject()：查询结果并封装为对象</p><p>​       注意：使用update方法时，第一个参数为sql语句，从第二个参数起是给占位符按顺序传参。</p><p>​              int count = template.update(sql,100,110000,666);</p><p>​       注意：使用query()方法时，query(sql,new RowMapper&lt;类名&gt;(){ })需要对具体要使用的实体类进行读取</p><p>如果换成使用方法query(sql, new BeanPropertyRowMapper&lt;类名&gt;(类名.class))，就提供了自行生成的解决办法</p><p>​       注意：使用queryForObject()时，第二个参数是指代表返回值类型的参数。一般用于聚合函数的查询</p><p>11、Junit单元测试</p><p>​       一般测试方法时都需要依赖于main方法来执行操作，非常麻烦</p><p>Junit可以让代码独立的执行，而不需要反复修改main方法</p><p>@Test</p><p>public void test1( ){</p><p>​       sout(方法被执行);</p><p>}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 知识集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE基础</title>
      <link href="/2020/07/07/javaee-ji-chu/"/>
      <url>/2020/07/07/javaee-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="就业班基础部分"><a href="#就业班基础部分" class="headerlink" title="就业班基础部分"></a>就业班基础部分</h2><h2 id="JavaEE基础部分"><a href="#JavaEE基础部分" class="headerlink" title="JavaEE基础部分"></a>JavaEE基础部分</h2><p>1、面向对象三大特征：封装、继承、多态</p><p>继承：extends      子类可以使用父类中非私有的成员</p><p>​       好处：①提高了代码的复用性（多个类相同的成员可以提取到一个类中）</p><p>​              ②提高了代码的维护性（如果方法的代码需要修改，修改一处即可）</p><p>​       弊端：类与类产生了关系，父类发生变化时子类实现也产生变化，耦合性增强，削弱了子类的独立性</p><p>2、继承中变量的成员访问特点：     在子类方法中访问一个变量，采用就近原则</p><p>​       ①子类局部范围   ②子类成员范围   ③父类成员范围</p><p>​       ④报错（不考虑父类的父类）</p><p>3、this/super 的作用</p><p>​    this代表本类成员对象的引用   super代表父类成员对象引用</p><p>​       子类中所有的构造方法默认都会访问父类中无参的构造方法</p><p>​       子类初始化前一定要先完成父类数据的初始化。原因在于，每一个子类构造方法的第一条语句默认都是：super( );</p><p>4、如果父类中没有无参构造方法，只有带参构造方法，该怎么办</p><p>​       ①通过使用super关键字去显示调用父类的带参构造方法</p><p>​       ②在子类中使用this去调用其他有参构造，调用本类的其他的构造方法，但是子类的其他的构造方法中一定会有一个去访问了父类的带参构造方法</p><p>③在父类中自己提供一个无参构造方法（推荐）</p><p>5、方法重写：     子类出现了和父类中一样的方法声明</p><p>​       方法名一样，参数列表也必须一样。</p><p>​       @Override注释用于检测当前方法是否是重写的方法</p><p>​       应用场景：子类需要父类功能但需要增加特有内容时</p><p>​       注意事项：①私有方法不能被重写（父类私有成员子类是不能继承的）</p><p>​                     ②子类方法访问权限不能更低（见6）</p><p>6、访问权限：权限修饰符</p><p>​              public       &gt;        protected       &gt;           默认      &gt;      private</p><p>不同包的无关类    不同包的子类     同一个包中的子类无关类    同一个类中 </p><p>7、继承的注意事项：</p><p>​       ①java中类只支持单继承，不支持多继承 （只有一个extends）</p><p>​              接口支持多继承</p><p>​       ②java中类支持多层继承</p><p>8、修饰符：</p><p>​       package：包，文件夹，用来管理文件，多级包用“.”隔开</p><p>​              package com.heima.com    带包编译/运行时后面继续点接类名（全路径）</p><p>​       import：导包，使用不同包下的类时需要导包，简化全路径</p><p>9、关键字：</p><p>​       final：代表最终版本    </p><p>​       修饰类：该类不能被继承（不能有子类但可以有父类）</p><p>​       修饰方法：该方法不能被重写</p><p>​       修饰变量：表明该变量是一个常量，不能再次被赋值</p><p>​              基本数据类型：表示数据值不能被改变</p><p>​              引用数据类型：引用类型的地址值不能被改变，但地址里的内容是可以改变的。</p><p>​       static：静态</p><p>​       修饰特点：①被类的所有对象共享，这是判断是否使用静态关键字的条件</p><p>​                                   只需对一个对象的静态变量赋值，其他的同类对象也发生改变</p><p>​                     ②可以通过类名调用，也可以通过对象名调用（推荐通过类名调用）</p><p>​       静态成员方法只能访问静态成员</p><p>10、多态：          同一对象，不同时刻表现出不同形态</p><p>​       前提：①要有继承或实现关系   ②要有方法的重写      ③要有父类引用指向子类对象</p><p>​       成员访问特点：成员变量：编译看父类，运行看父类（静态方法和变量一样）</p><p>​                            成员方法：编译看父类，运行看子类</p><p>​       多态好处：提高程序的扩展性；定义方法时，使用父类型为参数，在使用的时候，使用具体的子类型进行操作（不用写多个方法）</p><p>​       多态弊端：不能使用子类的特有成员</p><p>​       向上转型：父类引用指向子类对象                               Animal a = new Cat();</p><p>​       向下转型：子类型 对象名 =（子类型）父类引用        Cat c = (Cat)c; </p><p>11、抽象类：  abstract            共性的抽取</p><p>抽象方法不可实例化，抽象类中只定义（或部分实现）子类需要的方法。子类需要继承抽象类并自行实现</p><p>​       抽象类不一定有抽象方法，有抽象方法的类一定是抽象类 </p><p>​       抽象类的子类：要么重写抽象类中的所有抽象方法；要么是抽象类</p><p>​       抽象类可以继承具体类（concrete class）也可以继承抽象类</p><p>12、接口：   interface        对行为的抽象      public interface 接口名{ }           </p><p>​       实现接口： implements            public class 类名 implements 接口名</p><p>​       接口不能实例化                 通过子类对象实例化（多态）</p><p>​       接口的子类：要么重写接口中的所有抽象方法，要么子类也是抽象类</p><p>​       成员特点：①成员变量只能是常量   默认修饰符：public static final</p><p>​                     ②没有构造方法，因为接口主要是扩展功能的，而没有具体存在</p><p>​                     ③成员方法只能是抽象方法      默认修饰符：public abstract</p><p>​       接口与接口之间可以单继承也可以多继承</p><p>13、抽象类与接口设计理念：</p><p>​       抽象类：对类抽象，包括属性、行为</p><p>​       接口：对行为抽象，主要是行为</p><p>14、</p><p>类名作为方法的形参或返回值，其实调用的都是对象的【地址值】</p><p>抽象类作为形参或返回值，其实调用的都是该抽象类的【子类对象】</p><p>接口名作为形参或返回值，其实调用的是该接口的【实现类对象】</p><p>15、内部类：      一个类中定义一个类</p><p>​       访问特点：①内部类可以直接访问外部类的成员，包括私有</p><p>​                     ②外部类要访问内部类的成员，必须创建内部类的对象</p><p>​       成员内部类：和成员变量同等位置的内部类   （public/private class inner{ }）</p><p>​              Outer.Inner oi = new Outer().new Inner();</p><p>​              推荐使用方案：内部类的定义应该private私有化，再提供一个可以让外界调用的方法，在方法内部创建内部对象再调用</p><p>​       局部内部类：在方法中定义的类      （class inner{ } 外界无法使用）</p><p>​              外界无法直接使用，需要在方法内创建对象再使用</p><p>​              该类可以直接访问外部类的成员，也可以访问方法内的局部变量</p><p>​       匿名内部类： （new Inter( ){ 重写方法 }） 用来简化传统的代码</p><p>​              前提：存在一个类或者接口，这里的类可以是具体类也可以是抽象类</p><p>​              本质：是一个继承了该类或者实现了该接口的子类匿名对象</p><p>​              可以通过多态的形式直接接受： Inter I = new Inter（）{（重写方法）}</p><p>​              可以直接调用方法new Inter( ){重写method}.method( );</p><p>​              在开发中的使用：当发现某个方法需要接口或抽象类的子类对象，我们就可以直接传递一个匿名内部类过去，来简化传统的代码（不用再单独写一个类了）</p><p>16、常用API </p><p>Math类： 【abs 绝对值】  【ceil 天花板double】    【floor 地板double】   【round四舍五入后的int】</p><p>【max min    int】【 pow(a,b) a的b次幂double】【random() 返回[0.0,1.0)的正值 double】 </p><p>【Math.random()*2+1 1到3 的正值】</p><p>System类：  【exit(0) 终止java虚拟机     非零异常终止】           </p><p>【currentTimeMillis() 返回当前时间（毫秒）long】</p><p>Object类： 是目录结构的根 所有类都以Object为超类   </p><p>【toString() 按格式展示对象的属性值】  【 s1.equals(s2) 比较两对象，返回boolean】</p><p>Ctrl+B 查看方法源码</p><p>==比较的是数据地址值，equals比较的是对象的具体属性值</p><p>常常重写 toString 、equals 和 hashCode方法</p><p>工具类构造方法用private修饰，成员用public static修饰</p><p>Arrays类：  【toString(int[] a) 返回指定数组的内容的字符串表示形式】     【sort(int[] a) 按照数字顺序排列数组】 </p><p>17、冒泡排序： 排序的数据中相邻的数据进行两两比较，较大的数据放在后面，依次对所有的数据进行操作，直到所有数据排序完毕</p><p>冒泡排序如果有n个数据进行排序，总共需要比较n-1次 </p><p>每一次比较完毕，下一次的比较就会少一个数据参与</p><p>​       算法：双重循环，第一层arr.length-1控制轮次，第二层arr.length-1-i调整比较效率</p><p>18、包装类</p><p>​       int——Integer   char——Character</p><p>​       将基本类型封装为对象的好处在于：可以在对象中定义更多的功能方法操作该数据</p><p>常用操作： 用于基本数据类型与字符串之间的转换</p><p>​       Integer类：   【valueOf(int i) 返回指定int值得Integer实例】【valueOf(String s)返回保存String类型指定值的Integer对象】</p><p>int转为string：①直接在数字后面添加字符串    ②通过String类静态方法valueOf()</p><p>​       String转为int：①先将字符串数字转成Integer，再调用valueOf()方法</p><p>​                            ②通过Integer类的静态方法parseInt()进行转换</p><p>19、自动拆箱（包装——基本）和自动装箱（基本——包装）</p><p>​       Integer i = 100；  //自动装箱</p><p>​       i += 200；    //i + 200自动拆箱 i =i+200 自动装箱 </p><p>20、三个时间类</p><p>Date类        【无参构造Date()返回现在的时间】【有参构造Date(long date)返回从基准时间增加指定时间后的结果】      基准时间：CMT（格林尼治时间）1970.1.1，00：00=CST（美国、中国标准）1970.1.1，08：00</p><p>【getTime() 获取从基准时间到现在的毫秒值】 【setTime()设置时间，给毫秒值】</p><p>SimpleDateFormat类   用于以区域设置敏感的方式格式化和解析日期</p><p>【无参构造：使用默认格式打印时间】【有参构造：yyyy年MM月dd日HH：mm：ss自己设置的格式】 </p><p>【public final String format(Date date)将时间从Date格式化到String】  </p><p>【public Date parse(String source)将给定字符串解析为日期】</p><p>Calendar类 日历类            可以为某一时刻提供与日历字段转换的方法</p><p>​       日历字段：YEAR、MONTH(从0开始)、DAY_OF_MONTH、HOUR等信息（通过类名直接访问）</p><p>提供了类方法getInstance，返回一个Calendar对象，其日历字段已使用当前时间初始化</p><p>​              Calendar rightNow = Calendar.getInstance( );</p><p>​              类方法=static修饰，可通过类名调用。</p><p>非static修饰的是实例方法，必须创建一个实例才能调用</p><p>​       【public int get(int field) 根据输入的日历字段输出对应的值】</p><p>​       【public abstract void add(int field,int amount) 给指定的日历字段添加或减去给定的时间量】</p><p>​              【public final void set(int year,int month,int date) 设置当前日历的年月日】</p><p>21、异常体系： Throwable</p><p>​       Error: 严重问题，不需要处理</p><p>​       Exception： 异常类，程序本身可以处理的问题</p><p>​              运行时异常RuntimeException： 在编译期是不检查的，出现问题后需要回来修改代码（非必须显示）</p><p>​              编译时异常 非RuntimeException： 编译期就必须处理的，否则程序不能通过编译（必须显示处理）</p><p>​              运行时异常是RuntimeException子类，编译时异常是Exception子类，自定义异常类需要继承Exception</p><p>·         JVM默认处理方式：①把异常的名称、错误原因和异常位置等信息输出到控制台 ②停止运行</p><p>Throwable类： 【getMessage() 返回此throwable的详细消息字符串】   </p><p>【toString() 返回可抛出的简短描述】</p><p>​              【printStackTrace() 把异常的错误信息输出/打印在控制台】</p><p>​       ①try{</p><p>​                  可能出现异常的代码；</p><p>​              }catch(异常类名  变量名){</p><p>​                  异常的处理代码；</p><p>​              （程序执行try里的代码，出现问题执行catch里面的代码，结束后继续执行下面的代码）</p><p>}finally{</p><p>​       执行清除操作（close等）</p><p>​       或其他操作</p><p>​       （不管有没有异常， finally里的语句也一定会被执行，除非JVM退出）</p><p>​       （trycatch里有return时，finally的语句依然会执行，此时finally是在return的表达式运算之后执行的，此时并没有返回运算之后的值，而是把值先暂存起来，无论finally做任何操作，返回的值都不会改变，依然返回暂存起来的值）</p><p>}</p><p>② public void 方法( ) throws 异常类名{  }           还有一种，在方法内throw异常对象</p><p>22、throws和throw的区别</p><p>throws用在方法声明后面，跟的是异常类名         throw用在方法声明体内，跟的是异常对象名</p><p>throws表示抛出异常，由该方法的调用者来处理  throw表示抛出异常，由方法体内的语句处理</p><p>throws表示出现异常的一种可能性，并不一定会发生这些异常  执行throw一定抛出了某种异常</p><p>23、集合体系</p><p>单列Collection</p><p>​       List可重复  有索引    存取有序</p><p>​              ArrayList  数组结构  查询快，增删慢</p><p>​              LinkedList  链表结构  查询慢，增删快</p><p>​       Set不可重复   无索引（只能通过迭代器和增强for遍历）</p><p>​              HashSet  哈希表（不保证存储和取出顺序一致）</p><p>​                     LinkedHashSet：具有可预测的迭代次序   链表保证次序一致  哈希表保证元素唯一</p><p>​              TreeSet  元素有序 可以自然排序或比较器排序</p><p>双列Map</p><p>​       HashMap、TreeMap（Key，Value）</p><p>24、迭代器Iterator     集合的专用遍历方式   （集合对象c） </p><p>​       迭代器通过集合的iterator()方法得到，所以说它依赖于集合存在</p><pre><code> Iterator&lt;String&gt; it = c.iterator();   返回对象的迭代器​       while(it.hasNext( )){    //判断条件是还有下一个​           String s = it.next();       //读取元素​           System.out.println(s);​       }</code></pre><p>​       remove() 从迭代器指向的集合中移除迭代器返回的最后一个元素</p><p>并发修改异常 ConcurrentModificationException   </p><p>​       迭代器遍历的过程中，通过集合对象修改了集合中的元素，造成了迭代器获取元素中判断预期修改值和实际修改值不一致。</p><p>​       解决方法：用for循环进行遍历操作</p><p>25、List集合：</p><p>​       有序集合，用户可以控制每个元素的插入位置，用户可以通过整数索引访问元素，并搜索列表中的元素</p><p>​       特点：①有索引   ②可以存储重复元素   ③元素存取有序</p><p>List特有迭代器ListIterator  列表迭代器</p><p>​    允许延任一方向遍历，在迭代期间修改列表，并获取列表中迭代器的当前位置</p><pre><code>ListIterator&lt;String&gt; lit = list.listIterator()while(lit.hasNext( )){​       String s = lit.next();​       if(s.equals(“world”)){​       lit.add(“javaee”);    //可以add添加数据和set修改数据}}</code></pre><p>26、增强for循环                   （将元素单独取出来）    </p><pre><code>for(元素数据类型 变量名：数组/集合对象名){​              循环体；​       }​       int[] arr = {1,2,3,4}​       for(int i : arr){​       sout(i);}</code></pre><p>​       内部原理是一个Iterator迭代器，所以修改元素后会出现一样的异常</p><p>27、数据结构</p><p>​       栈：先进后出             队列：先进先出</p><p>​       数组结构：查询快、增删慢             队列结构：查询慢，增删快</p><p>28、ArrayList和LinkedList</p><p>​       ArrayList底层是数组结构，查询快，增删慢</p><p>​       LinkedList底层是链表结构，查询慢，增删快</p><p>29、泛型</p><p>​       List&lt;?&gt; 仅表示它是各种泛型List的父类，并不能把元素添加其中</p><p>List&lt;? extends Number&gt; Number或者其子类型</p><p>List&lt;? super Number&gt; Number或者其父类型</p><p>30、Set集合</p><p>​       特点：①元素存取无序      ②没有索引，只能通过迭代器或增强for遍历 ③不能存储重复元素</p><p>31、哈希值hashCode()     是JDK 通过对象的地址/字符串/数字计算出的int类型的数值</p><p>获取哈希值：public int hashCode( ) 返回对象的哈希值</p><p>特点：①同一对象多次调用hashCode( )返回的结果是相同的</p><p>​       ②默认情况下，不同对象的哈希值是不同的。</p><p>​       ③重写hashCode( )方法，可以实现让不同对象拥有相同哈希值。</p><p>32、HashSet集合</p><p>​       特点：①底层数据结构是哈希表      ②对集合的迭代顺序不作任何保证，不保证存储和取出顺序一致</p><p>​              ③没有带索引的方法，所以不能使用普通for循环遍历 ④由于是Set集合，所以不包含重复元素</p><p>HashSet保证元素唯一性原理：</p><p>①    根据哈希值计算存储位置，该位置没有元素则存入，有元素则进入②</p><p>②    当前元素和已存在元素对比哈希值，哈希值不同则存入当前元素，相同则进入③</p><p>③    equals()比较内容，内容不相同则存入当前元素，内容相同就不存储</p><p>LinkedHashSet集合</p><p>特点：①由哈希表和链表实现，具有可预测的迭代次序。 ②由链表保证元素有序，及存取顺序是一样的</p><p>④    由哈希表保证元素唯一</p><p>33、TreeSet集合</p><p>​       特点：①元素有序，按不同构造方法决定排序方式</p><p>​                     TreeSet( ):根据其元素的自然排序进行排序</p><p>​                     TreeSet(Comparator comparator):根据指定的比较器进行排序</p><p>​              ②没有带索引的方法，不能使用普通for循环进行遍历       ③Set集合不包含重复元素</p><p>TreeSet自然排序： 让元素所属的类实现Comparable接口，重写compareTo( )方法</p><p>​              重写方法时，要注意排序规则必须按照要求的主要条件和次要条件来写</p><p>TreeSet比较器排序：让集合构造方法接收Comparator的实现类对象，重写compare(T o1,T 02)方法</p><p>​              重写方法时，要注意排序规则必须按照要求的主要条件和次要条件来写</p><p>34、泛型             本质：参数化类型，即操作的数据类型被指定为一个参数</p><p>​       &lt;类型&gt;：指定一种类型            &lt;类型1，类型2，……&gt;：指定多种类型</p><p>​       将来具体调用的时候给定的类型可以看作实参，并且实参的类型只能是引用数据类型</p><p>​       好处：①把运行时期的问题提前到了编译时期             ②避免了强制类型转换</p><p>​       构成：泛型类、泛型方法、泛型接口</p><p>①泛型类： public class ClassName<type>{   }</type></p><p>​              ②泛型方法：public <type> void method(int i){   }</type></p><p>​              ③泛型接口：public interface InterfaceName<type> {   }</type></p><p>​       类型通配符：</p><p>​              ①&lt;?&gt;：表示元素类型未知，它的元素可以匹配任何类型</p><p>​                     注意：这种形式仅表示它是各种泛型的父类，并不能把元素添加到其中</p><p>​              ②&lt;? extends Number&gt;：表示Number或者其子类型</p><p>​              ③&lt;? super Number&gt;：表示Number或者其父类型</p><p>35、可变参数<br>        方法的形参为可变参数，那么该方法的参数个数是可变的</p><p>​       修饰符 返回值类型 方法名(数据类型… 变量名)</p><p>​       public static int sum(int… a){  }</p><p>​       注意：①这里的变量其实是一个数组      ②如果一个方法由多个参数，包括可变参数，可变参数要放在最后。</p><p>​       几个包含可变参数的集合类：</p><p>​              ①Arrays工具类public static List asList(T… a)：返回由指定数组支持的固定大小的列表</p><p>​                     返回的集合不能做增删操作，可以做修改操作</p><p>​              ②List接口public static List of(E… elements)：返回包含任意数量元素的不可变列表</p><p>​                     返回的集合不能做增删改操作</p><p>​              ③Set接口public static Set of(E… elements)：返回包含任意数量元素的不可变集合</p><p>​                     传入元素时不可以给重复的元素</p><p>​                     返回的集合不能做增删操作，没有修改的方法。</p><p>36、Map集合</p><p>​       interface Map&lt;K,V&gt;         K：键的类型，V：值的类型</p><p>​       特点：①键值对映射关系   ②一个键对应一个值   ③键不能重复，值可以重复      ④元素存取无序</p><p>​       方法：put(K key,V value)添加元素           containsKey()和contiansValue()判断是否包含</p><p>​       获取功能：get(Object key)根据键获取值        Set keyset() 获取所有键的集合</p><p>​                     Collection values()获取所有值的集合       Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()获取所有键值对对象集合</p><p>​       Map集合的遍历：①先获取所有键的集合，再通过键一个个取值</p><p>​                            ②获取所有键值对对象的集合，增强for遍历键值对对象集合，得到每一个键值对对象</p><pre><code>//获取所有键值对对象的集合Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();//遍历键值对对象的集合，得到每一个键值对对象for (Map.Entry&lt;String, String&gt; me : entrySet) {//根据键值对对象获取键和值String key = me.getKey();String value = me.getValue();System.out.println(key + "," + value);}</code></pre><p>​       在统计字符次数案例中：TreeMap用法和HashMap一样，但HashMap结果是无序的，TreeMap会对元素进行排序</p><p>37、Collections类：          是一个针对集合操作的工具类</p><p>​       public static void sort(List list)     将指定的列表按升序排序                             </p><p>​       public static void reverse(List&lt;?&gt; list)        反转指定列表中元素的顺序</p><p>​       public static void shuffle(List&lt;?&gt; list)         使用默认的随机源随机排列指定的列表</p><p>38、File类</p><p>​       File类是文件和目录路径名封装成对象的抽象表示，而无关是否存在</p><p>​       构造方法：</p><p>①File(String pathname)从一个路径名创建一个File对象      File f1 = new File(“E:\itcast\java.txt”);</p><p>​       ②File(String parent,String child):       File f2 = new File(“E:\itcast”,”java.txt”);</p><p>​       ③File(File parent,String child):          File f3 = new File(f ,”java.txt”)</p><p>​       功能方法：</p><p>​       ①public boolean creatNewFile( )       不存在该名称的文件时创造一个新的具有该抽象路径的空文件</p><p>​       ②public boolean mkdir( )           创建由此抽象路径名命名的目录</p><p>​       ③public boolean mkdirs( )         创建由此抽象路径名命名的目录，包括任何必须但不存在的父目录</p><p>​       判断和获取功能：</p><p>​       ①public boolean isDirectory( )          测试此抽象路径名的File是否为目录</p><p>​       ②public boolean isFile( )                   测试此抽象路径名的File是否为文件</p><p>​       ③public boolean exists( )                  测试此抽象路径名的File是否存在</p><p>​       ④public String getAbsolutePath()     返回此抽象路径名的绝对路径名字符串</p><p>​       ⑤public String getPath( )                  将此抽象路径名转换为路径名字符串</p><p>​       ⑥public String getName( )                返回由此抽象路径名表示的文件或目录的名字</p><p>​       ⑦public String[ ] list( )                       返回此抽象路径名表示的目录中的文件和目录的名称的字符串数组</p><p>​       ⑧public File[ ] listFiles( )                    返回此抽象路径名表示的目录中的文件和目录的File对象数组</p><p>​       删除功能：public boolean delete( )   删除由此抽象路径名表示的文件或目录</p><p>​       绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件</p><p>​       相对路径：必须使用取自其他路径名的信息进行解释。  </p><p>​                     不加路径默认将文件添加在包路径下</p><p>​                     加相对路径就是从文件名开始逐级向上寻找同名目录</p><p>39、递归：          方法定义中调用方法本身的现象</p><p>​              将复杂问题转化为与原问题相似的小规模问题来解决</p><p>​       注意事项：①递归一定要有出口。否则内存溢出</p><p>​                     ②递归虽然有出口，但递归次数不能过多，否则内存溢出</p><p>​              public static int method(int n){</p><p>​       if(n==1 || n==2){</p><p>​       return 1;</p><p>}else{</p><p>​       return method(n-1) + method(n-2);</p><p>}</p><p>}</p><p>40、IO流：         输入/输出（Input/Output）             流：抽象概念，指数据传输</p><p>​       常见应用：文件复制；文件上传、文件下载</p><p>​       按数据流向：输入流：读数据；输出流：写数据          （以内存为基准，向硬盘输出还是由硬盘输入）</p><p>​       按数据类型：字节输入/输出流         字符输入/输出流</p><p>​              如果操作的是纯文本文件，优先使用字符流</p><p>​              如果操作的是图片、视频、音频等二进制文件或不知道文件类型，优先使用字节流</p><p>41、字节流写数据</p><p>​       字节流抽象基类：InputStream/OutputStream：所有字节输入/输出流的超类</p><p>​              子类名都以其父类名作为后缀。</p><p>​       字节输出流FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</p><p>​       步骤：①创建字节输出流对象（调用系统创建了文件，创建字节输出流对象，让字节输出流对象指向文件）</p><p>​                     FileOutputStream fos = new FileOutputStream(“文件路径”);        完成了三件事</p><p>​              ②调用字节输出流对象的写数据方法</p><p>​                     fos.write(97);        将97写入文件</p><p>​              ③释放资源（关闭此文件输出流并释放与此流相关的任何系统资源）</p><p>​                     fos.close();            归还系统资源</p><p>​       写数据的方法：①void write(int b)：将指定的字节写入此文件输出流，一次写一个字节数据</p><p>​                     ②void write(byte[] b)：将b.leng长度的字节数组写入此文件输出流</p><p>​                     ③void write(byte[] b,int off,int len)：将指定的byte[]数组中从偏移量off开始的len个字节输入此文件</p><p>​       字节流写数据的常见问题</p><p>​              ①写数据如何进行换行：windows:\r\n    linux:\n   mac:\r</p><p>​              ②追加写入数据：构造方法创建对象public FileOutputStream(String name,boolean append)</p><p>创建文件输出流以指定的名称写入文件。如果第二个参数为true，则字节将写入文件的末尾而不是开头</p><p>42、字节流读数据</p><p>​       字节输入流：FileInputStream(String name)：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的路径名name命名</p><p>​       步骤：①创建字节输入流对象   ②调用字节输入流对象的读数据方法      ③释放资源</p><p>​       应用：字节流复制文本文件：          本质是把文本文件的内容读取出来再写入到另一文件</p><p>​              需要判断读取到的字节是否为-1，不是-1则存入文件，-1代表文件结尾。</p><p>43、字节缓冲流</p><p>​       BufferedOutputStream：应用程序可以向底层输出流写入字节，而不必为每个字节导致系统的调用。</p><p>​       BufferedInputStream：将创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将够根据需要从所包含的输入流中重新填充，一次很多字节。</p><p>​       构造方法：BufferedOutputStream(OutputStream out)、       BufferedInputStream(InputStream in)</p><p>44、字符流：             字节流操作中文不方便</p><p>​       字符流 = 字节流 + 编码表</p><p>​       用字节流复制文本文件依然可以复制中文，操作系统都能识别成中文原因：汉字在存储时，无论选择哪种编码方式，第一个字节是负数。</p><p>​       字符集：是系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等，不同字符集有不同的字符编码：如ASCⅡ字符集、GBXXX字符集、Unicode字符集（UTF-8）</p><p>​       ASCⅡ基本字符集用7位表示一个字符，扩展字符集用8位表示一个字符</p><p>​       GBK：使用双字节编码方案</p><p>​       UTF-8：使用一至四个字节为每个字符编码，是电子邮件、网页等优先使用的编码</p><p>​              编码规则：①128个US-ASCⅡ字符，只需要一个字节编码</p><p>​                            ②拉丁文等字符需要两个字节编码</p><p>​                            ③大部分常用字（包括中文），使用三个字节编码</p><p>​                            ④其他极少使用的Unicode辅助字符，使用四字节编码</p><p>​       编解码方法：①byte[] getBytes()：使用平台的默认字符集将该String字符串编码为一系列字节</p><p>​                     ②byte[] getBytes(String charsetName)：使用指定的字符集将String进行编码</p><p>​                     ③String(byte[] bytes)：使用平台默认的字符集将一系列字节解码为一个String字符串</p><p>​                     ④String(byte[] bytes, String charsetName)：使用指定的字符集进行解码。</p><p>45、字符流和编码解码：</p><p>​       InputStreamReader：字节流→字符流：读取字节并使用指定/默认的字符集解码为字符</p><p>​       OutputStreamWriter：字符流→字节流：使用指定/默认的字符集将写入的字符编码为字节</p><p>​       flush( )：刷新流，之后还可以继续写数据</p><p>​       close( )：关闭流，释放资源，但是在关闭之前会执行flush。一旦关闭就不能再写数据。</p><p>46、字符缓冲流</p><p>​       BufferedWriter：将文本写入字符输出流，缓冲字符/数组/字符串，可指定缓冲区大小，默认值足够大</p><p>​       BufferedReader：从字符输入流中读取文本，缓冲字符</p><p>​       BufferedWriter(Writer out)：创建字符缓冲输出流对象</p><p>​       BufferedReader(Reader in)：创建字符缓冲输入流对象</p><p>​       字符缓冲流特有功能：</p><p>​              BufferedWriter： void newline( )写一行行分隔符，行分隔符字符串由系统属性定义</p><p>​                                   void write(String line)一次写一个字符串</p><p>​             BufferedReader： String readLine( )一次读一个字符串。结果包含行的内容的字符串，不包括任何终止字符。如果流的结尾已经到达，则为null。</p><p>47、IO流总结</p><p>​     <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133455646.png" alt="1594133455646">                                             </p><p>   <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133447327.png" alt="1594133447327"></p><p>48、split( )方法用于分割字符串</p><p>​       例如：String[] strArray = line.split(“,”)，就是以逗号为分隔符分割字符串，得到一个数组</p><p>49、复制多级文件夹（流程）</p><p>​       创建数据源和目的地File对象</p><p>​       写复制文件夹的方法，先判断是否为目录，是则读取目录名称，在目的地创建同名目录，再遍历目录下所有文件，递归执行复制文件夹方法；否则调用复制文件方法</p><p>​       写复制文件方法，创建输入输出流对象，定义缓冲数组，复制文件。</p><p>​       最后抛出IO流异常，归还资源</p><p>49、标准输入输出流 ：            System类中的两个静态的成员变量：</p><p>​              ①public static final InputStream in：标准输入流。对应于键盘输入或由主机环境或用户指定的另一个输入源。      ②public static final PrintStream out：标准输出流。对应于显示输出或由主机环境或用户指定的另一个输出目标。</p><p>​              输出语句的本质是一个标准的输出流</p><p>​              PrintStream ps = System.out;            PrintStream类特有的方法，System.out都可以使用</p><p>​       字节打印流：PrintStream          字符打印流：PrintWriter</p><p>​              打印流特点：①只负责输出数据，不负责读取数据②永远不会抛出IOException③有独特的方法</p><p>​              PrintStream：①PrintStream(String fileName)：使用指定的文件名创建新的打印流</p><p>​                     ②使用继承父类的方法写数据，查看的时候会转码；使用自己的特有方法写数据，查看的数据原样输出          ③可以改变输出语句的目的地：public static void setOut(PrintStream out)：重新分配标准输出流</p><p>​              PrintWriter：①PrintWriter(String fileName)：使用指定文件名创建，不需要执行自动刷新</p><p>​                     ②PrintWriter(Writer out,boolean autoFlush)：创建一个心的PrintWriter out，autoFlush如果为真则println，printf，或format方法将刷新输出缓冲区</p><p>对象序列化流：   将对象保存在磁盘中，或在网络中传输对象</p><p>​       原理：使用一个字节序列表示一个对象，该字节序列包括：对象的类型、对象的数据和对象中存储的属性等信息。字节序列写到文件后，相当于文件中持久保存了一个对象的信息；反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</p><p>​       ObjectOutputStream：将Java对象的原始数据类型和图形写入。可以使用ObjectOutputSream读取（重构）对象。可以通过使用流的文件来实现对象的持久存储。如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象。</p><p>​       构造方法：ObjectOutputStream(OutputStream out)：创建一个写入指定OutputStream的序列化流</p><p>​       序列化方法：void writeObject(Object obj)：将指定的对象写入ObjectOutputStream。</p><p>​       注意：①一个对象想要被序列化，该对象所属的类必须实现Serializable接口</p><p>​              ②Serializable接口是一个标记接口，实现该接口不需要重写任何方法。</p><p>​       对象反序列化流：ObjectInputStream</p><p>​              ObjectInputStream反序列化之前先使用ObjectOutputStream编写的原始数据和对象</p><p>​              构造：ObjectInputStream(InputStream in):</p><p>​              反序列化方法：Object readObject( )：从ObjectInputStream读取一个对象</p><p>​       注意：①用对象序列化流序列化了一个对象之后，假如我们修改了对象所属的类文件，读取数据会出现问题：抛出InvalidClassException异常；</p><p>解决办法：重新序列化；</p><p>或给对象所属的类加serialVersionUID：public static final long serialVersionUID = 42L;</p><p>​              ②如果一个对象中的某个成员变量的值不想被序列化：给该成员变量加transient关键词修饰，该关键词标记的成员变量不参与序列化过程。</p><p>50、Properties集合</p><p>​       Properties是一个Map集合体系的集合类（K，V）</p><p>​       Properties可以保存到流中或从流中加载</p><p>​       属性列表中的每个键及其对应的值都是一个字符串。</p><p>​       特有方法（Map没有）：</p><p>​              ①Object setProperty(String key，String value)设置集合的键和值，均String类型，底层调用Hashtable方法put</p><p>​              ②String getProperty(String key)：使用此属性列表中指定的键搜索属性</p><p>​              ③Set stringPropertyNames( )：从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串。</p><p>​       Properties和IO流结合：</p><p>​              ①void load(InputStream inStream)：从输入字节流读取属性列表（键和元素对）</p><p>​              ②void load(Reader reader)：从输入字符流读取属性列表（键和元素对）</p><p>​              ③void store(OutputStream out,String comments)：将此属性列表（键和元素对）写入此Properties表中，以适合于使用load(InputStream)方法的格式写入输出字节流</p><p>​              ④void store(Writer writer,String comments)：将此属性列表（键和元素对）写入此Properties表中，以适合于使用load(Reader)方法的格式写入输出字节流</p><p>51、多线程</p><p>​       进程：正在运行的程序；是系统进行资源分配和调用的独立单位，每一个进程都有它自己的内存空间和系统i资源</p><p>​       线程：是进程中的单个顺序控制流，是一条执行路径</p><p>​              一个进程仅有一条执行路径叫单线程，多条叫多线程</p><p>52、实现多线程方式一：【继承Thread类】</p><p>​              方法：void run() 在线程开启后，此方法将被调用执行</p><p>void start() 使此线程开始执行，Java虚拟机会调用run() 方法</p><p>​              定义一个MyThread类继承Thread类 → 在MyThread类中重写run() → 创建MyThread对象 → 创建线程</p><p>​              注意：①为什么要重写run()方法</p><p>​                     因为run()是用来封装被线程执行的代码</p><p>​                     ②run()和start()的区别？</p><p>​                     run()：封装线程执行的代码，直接调用，相当于普通方法的调用</p><p>​                     start()：启动线程；然后由JVM调用此线程的run()方法</p><p>​              方法：①void setName(String name)设置此线程的名称</p><p>​                     ②String getName()返回此线程的名称</p><p>​                     ③Thread currentThread()返回对当前正在执行的线程对象的引用</p><p>53、线程优先级：</p><p>​       调度方式：①分时调度模型：线程轮流使用CPU，平均分配时间片</p><p>②抢占式调度模型：优先让优先级高的线程使用CPU，优先级相同随机选取，并且会获得相对低级别线程更多的时间片</p><p>java是抢占式调度模型</p><p>​       多线程程序的执行是随机性的：一个CPU在某一时刻只能执行一条命令。不一定是哪个线程得到时间片</p><p>​              final int getPriority() 返回此线程的优先级</p><p>​              final void setPriority(int newPriority)：更改此线程的优先级，线程默认优先级是5；线程优先级的范围是1-10；</p><p>54、线程控制：</p><p>​       static void sleep(long millis):使当前正在执行的线程暂停指定的毫秒数</p><p>​       void join()等待这个线程死亡</p><p>​       void setDaemon(boolean on)当此线程标记为守护线程（并行变串行），当运行的线程都是守护线程时，无论守护线程是否结束，Java虚拟机将退出</p><p>55、线程的生命周期</p><p>​                                                  <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133424518.png" alt="1594133424518"></p><p>56、实现多线程方式二：实现Runnable接口</p><p>​       Thread实现了Runnable</p><p>​       构造方法Thread(Runnable target)分配一个新的Thread对象</p><p>​              Thread(Runnable target ,String name)分配一个新的Thread对象并命名</p><p>·      定义一个类MyRunnable实现Runnable接口 → 在MyRunnable类中重写run()方法 → 创建MyRunnable类的对象 → 创建Thread类的对象，把MyRunnable对象传入构造方法→启动线程</p><p>​       相比继承Thread类，实现Runnable接口的好处：</p><p>​              ①避免了Java单继承的局限性</p><p>​              ②适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</p><p>57、线程同步</p><p>​       卖票案例</p><p>​       相同的票出现了两次，出现了负数的票：线程执行的随机性导致的</p><p>​       安全问题出现条件：①多线程环境   ②有共享数据      ③有多条语句操作共享数据</p><p>​       同步代码锁：</p><p>​              给多行代码加锁，让同一时间只有一个线程执行</p><p>​              synchronized(任意对象){</p><p>​                     多条语句操作共享数据的代码</p><p>}             任意对象可以看作一把锁</p><p>好处：解决了多线程的数据安全问题</p><p>弊端：当线程很多时，每个线程都去判断同步上的锁，耗费大量时间资源</p><p>​       同步方法的两种格式：</p><p>​       ①同步方法                        锁对象：this</p><p>​       修饰符 synchronized 返回值类型 方法名(方法参数){</p><p>​              方法体；</p><p>}</p><p>②静态同步方法                 锁对象：类名.class</p><p>修饰符 static synchronized 返回值类型 方法名(方法参数){</p><p>​       方法体；</p><p>}</p><p>线程同步的方法</p><p>​       StringBuffer：线程安全，可变的字符序列，JDK5被StringBuilder取代（有全部方法且不执行同步）</p><p>​       Vector：改进了List接口，与新的集合实现不同，Vector被同步，不需要线程安全时建议使用ArrayList</p><p>​       Hashtable：该类实现了哈希表，将键映射到值，任何非null对象都可以用作键或值，不需要线程安全时建议使用HashMap</p><p>58、Lock锁</p><p>​       Lock是接口不能直接使用，通过它的实现类ReentrantLock来实例化</p><p>synchronized缺陷：synchronized释放锁有两种情况，执行完代码块或线程发生异常。锁状态无法直观判断，如果A线程阻塞，B会一直等待。</p><p>Lock：锁对象可以直观判断，线程有多个锁获取的方式，线程可以尝试获得锁而不用持续等待。但Lock必须在finally中释放锁，否则会造成死锁。</p><p>​       void lock()获得锁         void unlock()释放锁</p><p>​       在执行方法体前lock，在执行后unlock</p><pre><code>while(true){​       try{​       lock.lock();​       if(tickets &gt; 0){​       try{​       Thread.sleep(100);}catch(InterruptedException e){​       e.printStackTrace();}System.out.println(Thread.currentThread().getName() + “正在出售第几张票”)；tickets --;}}finally{​       lock.unlock();}}</code></pre><p>59、生产者消费者模式</p><p>​       是一种经典的多线程协作的模式。包含两类线程：生产者线程生产数据、消费者线程消费数据。</p><p>​       为了解耦生产者消费者关系，采用共享的数据区域，生产者生产数据后放置在共享数据区中，不需要关系消费者的行为；消费者只需从共享数据区中获取数据，不需要关心生产者</p><p>​       Object类的方法（不需要对象调用）：</p><p>​              void wait()：导致当前线程等待，直到另一线程调用该对象的notify或notifyAll</p><p>​              void notify()：唤醒正在等待对象监视器的单个线程</p><p>​              void notifyAll()：唤醒正在的等待对象监视器的所有线程</p><p>​       </p><p>60、网络编程</p><p>​       三要素：ip地址、端口、协议</p><p>​       ip地址：计算机在网络中的唯一标识；IPv4（32bit）IPv6（128bit）127.0.0.1回送地址</p><p>​              InetAddress类：表示IP地址</p><p>​              static InetAddress getByName(String host)：通过主机名称或IP地址获取对象</p><p>​              String getHostName()：获取此IP地址的主机名称</p><p>​              String getHostAddress()：返回此文本显示中的IP地址字符串</p><p>​       端口：设备上应用程序的唯一标识。0<del>65535，其中0</del>1023用于一些知名的网络服务或应用</p><p>​       协议：连接和通信的规则</p><p>61、UDP：                 用户数据报协议</p><p>​       UDP是一种无连接通信协议：在数据传输时，数据的发送端和接收端不建立逻辑连接，不确认对方是否存在</p><p>​       消耗资源少，通信效率高</p><p>​       通信两端各建立一个Socket对象，但两个Socket只是发送、接收数据的对象</p><p>​       DatagramSocket类作为基于UDP的Socket类</p><p>​              DatagramSocket()：创建数据报套接字并将其绑定到本机地址上的任何可用接口</p><p>​              DatagramPacket(byte[] buf, int len, InetAddress add, int port)：创建数据包，发送长度为len的数据包到指定主机的指定接口</p><p>​              void send(DatagramPacket p)：发送数据包</p><p>​              void close()：关闭数据包套接字</p><p>​              void receive(DatagramPacket p)：从此套接字接受数据包</p><p>​       DatagramPacket类：         (继承自Object类，用来打包数据)</p><p>​              DatagramPacket(byte[] buf, int len)：创建一个DatagramPacket用于接收数据长度为len的数据包</p><p>​              byte[] getData()：返回数据缓冲区</p><p>​              int getLength()：返回要发送的数据的长度或接收数据的长度</p><p>​       发送数据步骤：①创建发送端的Socket对象(DatagramSocket) ②创建数据，并把数据打包 ③调用DatagramSocket对象的方法发送数据  ④关闭发送端</p><p>​       接收数据步骤：①创建接收端的Socket对象(DatagramSocket) ②创建一个数据包，用于接收数据 ③调用DatagramSocket对象的方法接收数据 ④解析数据包，并把数据在控制台显示 ⑤关闭接收端</p><p>62、TCP：                  传输控制协议</p><p>​       TCP是面向连接的协议：经历三次握手明确建立连接再开始传输数据</p><p>​       TCP使用Socket对象代表两端的通信端口，并通过Socket产生IO流来进行网络通信。</p><p>​       Java为客户端提供了Socket类，为服务端提供了ServerSocket类</p><p>​       Socket类的构造以及方法：</p><p>​              Socket(InetAddress address, int port)：创建流套接字并将其连接到指定IP指定端口号</p><p>​              Socket(String host, int port)：创建流套接字并将其连接到指定主机上的指定端口号</p><p>​              InputStream getInputStream()：返回此套接字的输入流</p><p>​              OutputStream getOutputStream()：返回此套接字的输出流</p><p>​              创建客户端的Socket对象 → 获取输出流，写数据 → 释放资源</p><p>​       ServerSocket类的构造以及方法</p><p>​              ServletSocket(int port)：创建绑定到指定端口的服务器套接字</p><p>​              Socket accept()：监听要连接到此的套接字并接收它</p><p>​              创建服务器端的Socket对象 → 监听客户端的套接字 → 获取输入流，读数据 → 释放资源</p><p>​       TCP和UDP套接字与输入输出流以及File类结合起来就可以传输文件了</p><p>63、Lambda表达式</p><p>​       前提：①是一个接口 ②接口中有且仅有一个抽象方法</p><p>​       匿名内部类编译后会产生一个单独的.class字节码文件，Lambda编译后不会产生.class文件，而是在运行时动态生成。</p><p>   <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133377545.png" alt="1594133377545"></p><p>​       箭头是固定写法，括号里是传入的参数类型，必须根据上下文环境才能推导Lambda的含义</p><p>   <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133372103.png" alt="1594133372103"></p><p>   <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133368195.png" alt="1594133368195"></p><p>64、接口中的几种方法</p><p>​       ①常量public static final</p><p>​       ②抽象方法 public abstract </p><p>③接口中的默认方法public default void method(){ }                                  出现于java8</p><p>​       默认方法不是抽象方法，不强制重写，重写的时候去掉default关键字</p><p>​       ④接口中的静态static方法只能通过接口名调用，不能通过实现类名或者对象名调用。              出现于Java8</p><p>​       ⑤私有private方法：为了解决默认/静态方法的问题                                出现于Java9</p><p>​              解决问题：当抽象方法和静态方法中包含一段相同代码时，常考虑抽取为共性方法，而当共性方法不需要被使用时，可以使用私有化将其隐藏</p><p>​              注意：①默认方法可以调用私有的静态方法和默认方法 ②静态方法只能调用私有的静态方法</p><p>65、方法引用：          是Lambda的孪生兄弟</p><p>​       用来调用上下文已存在的代码块</p><p>​       使用“::”来省略可通过上下文推导的部分</p><p>​       类名：：静态方法</p><p>​       Lambda：method(s -&gt; Integer.parseInt(s))      引用：method(Integer :: parseInt)</p><p>​       Lambda被类方法替代时，它的形式参数全部传递给静态方法做参数。</p><p>​       对象：：成员方法</p><p>​       类名：：成员方法</p><p>​       类名：：new                引用构造器</p><p>66、函数式接口：                    有且仅有一个抽象方法的接口</p><p>​       通过@FunctionalInterface来检测是否为函数式接口</p><p>​       常用函数式接口：</p><p>​              ①Supplier接口：生产线接口    如果指定了接口的泛型是什么类型，那么接口中的get方法就会产生这种类型。           T get( )：按照某种实现逻辑(由Lambda表达式实现)返回一个数据</p><p>​              ②Consumer接口：消费型接口  它消费的数据的数据类型由泛型指定</p><p>​                     void accept(T t)：对给定的参数执行此操作</p><p>​                     default Consumer andThen(Consumer)：返回一个组合的Consumer，依次执行此操作，然后执行after操作</p><p>​              ③Predicate接口：通常用于判断参数是否满足指定的条件</p><p>​              ④Function&lt;T,R&gt;接口：通常用于对参数进行处理，转换(处理逻辑由Lambda表达式实现)，然后返回一个新的值</p><p>59、Stream流</p><p>​       使用filter过滤集合的字符串信息</p><p>​       生成Stream流的方式：</p><p>​              ①Collection：使用默认方法stream()生成流 default Stream stream();</p><p>​              ②Map：把Map转成Set集合，间接生成流</p><p>​              ③数组，通过Stream接口的静态方法of(T… values)生成流</p><p>​       中间操作方法：                 执行完此操作后，Stream流依然可以继续执行其他操作</p><p>   <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133303278.png" alt="1594133303278"></p><p>​       终结操作方法：                 执行完此方法后，Stream流将不能执行其他操作</p><p>   <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133309456.png" alt="1594133309456"></p><p>​       收集操作方法：                 对数据使用Stream流的方式操作完毕后，可以把流中的数据收集到集合中</p><p>   <img src="C:%5CUsers%5CClick%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1594133317301.png" alt="1594133317301"></p><p>60、类加载器</p><p>​       JVM进行操作的三步：当程序要使用某个还未被加载到内存的类时，JVM会进行类的加载、类的连接、类的初始化三个步骤</p><p>​       类的加载：将.class文件读入内存，并位置创建一个java.lang.Class对象。任何类被使用时系统都会为之创建一个java.lang.Class对象</p><p>​       类的连接：分三个阶段：①验证阶段：检验被加载的类是否有正确的内部结构，并和其他类协调一致</p><p>​                                          ②准备阶段：为类的类变量分配内存，并设置默认初始化值</p><p>​                                          ③解析阶段：将类的二进制数据中的符号引用替换为直接引用</p><p>​       类的初始化：对类变量进行初始化步骤</p><p>​              ①假如类还未被加载和连接，先进行加载和连接</p><p>​              ②假如类的直接父类未被初始化，先初始化父类</p><p>​              ③假如类中有初始化语句，则系统依次执行这些初始化语句</p><p>​              注意：父类被初始化时仍需执行①-③步骤</p><p>​              类的初始化时机：①创建类的实例   </p><p>②调用类的类方法      </p><p>③访问类或者接口的类变量，或者为该类变量赋值      </p><p>④使用反射方式来创建某个类或接口对应的java.lang.Class对象       </p><p>⑤初始化某个类的子类      </p><p>⑥直接使用java.exe命令来运行某个子类</p><p>​       类加载器：负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象。</p><p>​       JVM的类加载机制：</p><p>①全盘负责：当一个类加载器负责加载某个Class时，该Class所依赖和引用的其他Class也将由该类加载器负责载入，除非显示使用另一个类加载器来载入</p><p>②父类委托：当一个类加载器试图加载某个Class时，先让父加载器试图加载此Class，只有在父类无法加载该类时才尝试从自己的类路径中加载该类</p><p>③缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区。</p><p>61、反射</p><p>​       指在运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建变量，调用方法的一种机制，由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期依然可以拓展。</p><p>​       获取Class类对象的三种方式：①类名.class属性 ②对象名.getClass()方法 ③Class.forName(全类名)方法</p><p>​       </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识集合 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaSE基础</title>
      <link href="/2020/07/07/javase-ji-chu/"/>
      <url>/2020/07/07/javase-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>YYYY和yyyy一定要分清，YYYY在本周过年时就会显示为次年</p><h2 id="Java命名规范："><a href="#Java命名规范：" class="headerlink" title="Java命名规范："></a>Java命名规范：</h2><p>​    ①项目名称全部用小写testjavaproject</p><p>​       ②包名：将域名反过来写 com.heima</p><p>​       ③类名：大驼峰 且public同名</p><p>​       ④方法名和对象名（变量名）：小驼峰 getName() 方法名由动词+名词组成</p><p>​       ⑤属性名：小驼峰，dbClassName() 形容词+名词</p><p>​       ⑥常量：大写+下划线   MAX_SPEED=50</p><p>​       ⑦属性文件（.properties）：object.a_b_c格式，全部小写，其中object是宿主，a_b_c多个单词下划线分开</p><p>​       ⑧xml文件：全部小写，-符号是其xml的用途说明，类似applicationContext属习惯命名。</p><p>比如springmvc-servlet.xml、workdesk-manager.xml、workdesk-servlet.xml、applicationContext-basic.xml等。</p><p>xml里的内容多个字符间以-隔开，比如param-name，filter-mapping等。</p><p>​    ⑨普通文件例如jsp、js、img等与java规范一样</p><p>​    ⑩数据库命名：表、字段全部大写，多个单词以下划线隔开</p><h2 id="JavaSE："><a href="#JavaSE：" class="headerlink" title="JavaSE："></a>JavaSE：</h2><p>1、扩展的赋值运算符隐含了强制类型转换（+=   /=之类）</p><p>2、&amp;与 |或 ^异或 !非     异或：结果相同false，不同true</p><p>&amp;&amp;短路与    ||短路或    短路：左边判断出来右边就不执行了</p><p>3、三元运算符： 关系表达式 ? 表达式1 : 表达式2;  true执行1false执行2</p><p>4、Java中 java.math和java.lang包下的类不用导包</p><p>5、数据输入使用Scanner类（java.util要导包，java.lang不需要导包）</p><p>​       Scanner sc = new Scanner(System.in);      String str = sc.nextLine()</p><p>随机数使用Random类（）</p><p>6、nextLine 会跳过一行:1 nextLine用在最前面  2 使用nextLine前进行一次无关输入       nextLine互相之间没有问题</p><p>7、流程控制语句：顺序结构、分支结构、循环结构</p><p>分支： if( ){ }else{ }else if( ){ }</p><p>​              Switch() case1: break ;case2: break ;default     case没有对应的break会穿透</p><p>​                  </p><p>循环结构：for  、while  、do……while</p><p>8、死循环的三种格式</p><p>​       for(;;){ }          while(true){ }         do{ }while(true)</p><p>中断循环的几种方式 return（方法结束） break（循环结束）   continue（进行下一次循环）</p><p>9、跳转控制语句break（跳出循环、结束循环）</p><p>​       Continue（跳过本次循环，继续下次循环）只能在循环中使用</p><p>10、\表示转义符        \t水平制表符  \n换行  \b退格     </p><p>水平制表符是补全（8-前面字符的位数%8）的距离</p><p>​       / 表示路径 如&lt; form action=” /path / aa.jsp “</p><p>11、Random产生随机数  int num = r.nextInt(10)+10  产生10-19的随机数</p><p>12、数组静态初始化：int[ ] arr = {1,2,3}    </p><p>​              完整版：int[ ] arr = new int[ ]{1,2,3};</p><p>动态初始化：int[ ] arr = new int[3] </p><p>​       静态初始化：创建时直接将元素确定。</p><p>​       数组使用arr.length</p><p>13、栈内存：储存对象或数组——通过new来创建的</p><p>堆内存：方法运行时使用的内存，例如main方法运行时进入方法栈运行</p><p>14、数组的两个异常：</p><p>​       ArrayIndexOutOfBoundsException：索引越界异常</p><p>​       NullPointerException：空指针异常          给数组一个真正的堆内存空间引用</p><p>15、方法定义：public static 数据类型 方法名 (int a,int b,int c){   return参数}</p><p>​       方法调用：方法名（a，b，c）</p><p>​       形参：方法定义中的参数</p><p>​       实参：方法调用中的参数</p><p>16、方法重载  条件：</p><p>​       ①多个方法在同一个类中</p><p>​       ②多个方法具有相同的方法名</p><p>​       ③多个方法的参数不同，类型不同或数量不同</p><p>注意：重载仅对应方法的定义，与方法的调用无关</p><p>​       重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换言之不能通过返回值来判断两个方法是否构成重载</p><p>17、方法参数传递：   </p><p>基本数据类型的参数，形式参数的改变不影响实际参数</p><p>​       每个方法有独立的栈空间，方法运行后弹栈消失</p><p>​       引用类型的参数，形式参数的改变影响实际参数的值</p><p>​              引用数据类型传入的是地址值，内存中会造成两个引用指向一个地址，所以即使方法弹栈，堆内存中的数据也已经是改变后的结果。</p><p>18、debugger看程序执行进度和变量变化  console看程序运行结果，也可以当命令行窗口使用</p><p>​       Step into（F7）遇到子函数后单步执行          </p><p>Step over：遇到子函数后将子函数视为整体，一次执行完毕</p><p>Step out：单步执行到子函数时，用out可以执行完子函数剩下部分，并返回到高一层的函数，跳出子函数</p><p>Step into My Code：可以让debug回到自己的代码并继续向下执行</p><p>19、类和对象：   类是对事物（共同属性或行为）的一种描述，对象则为具体存在的事物</p><p>​       类的定义：①定义类②编写类的成员变量③编写类的成员方法</p><p>​       对象的使用：类名 对象名 = new 类名( )</p><p>​                            对象名.成员变量         对象名.成员方法</p><p>20、多个对象指向同一内存空间，Student s2 = s1， 对任一对象修改时，另一对象获取到的都是修改后的数据</p><p>21、成员变量和局部变量的区别：</p><p>​       ①类中位置：成员变量（类中方法外），局部变量（方法内部或方法声明上）</p><p>②内存中位置：成员变量（堆内存），局部变量（栈内存）</p><p>​       ③生命周期：成员变量（随着对象的存在而存在），局部变量（随着方法调用而存在）</p><p>​       ④初始化值：成员变量（有默认初始化值），局部变量（没有默认值，需要先定义和赋值才能使用）</p><p>​       Boolean：false     字符型：‘\u0000’（空字符）     浮点型：0.0</p><p>​       整数型：0            引用型：String等为null </p><p>22、private关键字（封装）</p><p>​       被private修饰的成员只能在本类进行访问</p><p>​       通过getXxx( )/setXxx(参数)方法可进行设置和调用</p><p>23、this关键字： this指代成员变量    方法同名时，不带this的是形参，不同名时，不带this的是成员变量</p><p>​       this代表当前调用方法的引用，哪个对象调用的方法，this就代表的哪个对象</p><p>24、面向对象三大特征： 封装、继承、多态</p><p>封装思想：是面向对象编程语言对客观世界的模拟。客观世界中成员变量是隐藏在对象内部的，外界无法直接操作</p><p>封装原则：将类的部分信息隐藏在类内部，不允许外部直接访问，而是通过该类提供的方法（get/set）来实现对隐藏信息（private）的操作和访问</p><p>封装好处：通过方法来控制成员变量的操作，提高了代码的安全性；把代码用方法进行封装，提高了代码的复用性</p><p>25、构造方法：主要用于完成对象数据的初始化</p><p>​       没有定义构造方法，系统会给出默认空参构造；定义了有参构造方法系统将不会给默认空参构造，需要手动添加空参构造</p><p>26、接口和api</p><p>​       Api：应用程序编程接口。是JDK中将底层实现封装起来的功能类</p><p>27、String类的特点：</p><p>①字符串不可变，他们的值在创建后不能被更改，</p><p>②虽然String的值是不可变的，但是他们可以被共享 </p><p>③字符串效果上相当于字符数组（char[]），但是底层原理是字节数组（byte[]）</p><p>通过new（构造方法）创建的字符串对象，每一次new都会申请一个内存空间，虽然内容相同但是地址值不同</p><p>通过“ ”（直接复制）方式给出的字符串，只要字符序列相同，无论在程序中出现几次，JVM都会创建一个String对象，并在字符串池中维护</p><p>28、 == 号的作用：</p><p>​       比较基本数据类型：比较的是具体的值</p><p>​       比较引用数据类型：比较的是对象的地址值</p><p>​       equals方法：比较两个对象的内容是否相同，区分大小写</p><p>29、遍历字符串Public char charAt（int index）方法获取到索引处字符</p><p>30、统计字符次数案例：A=65 a=97</p><p>31、StringBuilder类 创建可变的字符串对象       构造：根据String创建可变字符串</p><p>方法：append 添加数据          reverse 返回反转的字符序列           toString转成String</p><p>aaaa.equalsIgnoreCase(AAAA)   string的不区分大小写比较方法</p><p>toLowerCase字符串中的字符都转为小写</p><p>stratWith(“0”) 以字符0开头，是则true，否则false</p><p>32、ArrayList类：底层由数组实现，存储空间可变</p><p>​       使用泛型约束元素类型      ArrayList<string> array = new ArrayList<string>();</string></string></p><p>​       Size返回集合中元素个数          add添加元素       remove删除指定位置的元素</p><p>Set修改指定位置的元素</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识集合 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
